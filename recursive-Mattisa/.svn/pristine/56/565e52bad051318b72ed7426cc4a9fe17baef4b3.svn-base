
/* -*- c++ -*- */
{ 
    entities = { 

        brightBlueEmitterSphere = VisibleEntity { 
            frame = Point3(-2, -0.6, 0 ); 
            model = "brightBlueEmitterSphereModel"; 
            visible = true; 
        }; 
        
        brightCyanEmitterSphere = VisibleEntity { 
            frame = Point3(-2, -0.6, 1 ); 
            model = "brightCyanEmitterSphereModel"; 
            visible = true; 
        }; 
        
        brightGreenEmitterSphere = VisibleEntity { 
            frame = Point3(-2, -0.6, 2 ); 
            model = "brightGreenEmitterSphereModel"; 
            visible = true; 
        }; 
        
        brightPurpleEmitterSphere = VisibleEntity { 
            frame = Point3(-2, -0.6, -1 ); 
            model = "brightPurpleEmitterSphereModel"; 
            visible = true; 
        }; 
        
        brightRedEmitterSphereModel = VisibleEntity { 
            frame = Point3(-2, -0.6, 4 ); 
            model = "brightRedEmitterSphereModel"; 
            visible = true; 
        }; 
        
        brightYellowEmitterSphere = VisibleEntity { 
            frame = Point3(-2, -0.6, 3 ); 
            model = "brightYellowEmitterSphereModel"; 
            visible = true; 
        }; 
        
        camera = Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = true; 
                farBlurRadiusFraction = 0.005; 
                farBlurryPlaneZ = -100; 
                farSharpPlaneZ = -40; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "ARTIST"; 
                nearBlurRadiusFraction = 0.015; 
                nearBlurryPlaneZ = -0.05; 
                nearSharpPlaneZ = -0.1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                bloomRadiusFraction = 0.01796; 
                bloomStrength = 0.2; 
                debugZoom = 1; 
                gamma = 2.2; 
                sensitivity = 1.0; 
                toneCurve = Spline { 
                    control =  ( 0, 0.0787234, 0.306383, 0.75532, 0.829787 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time =  ( 0, 0.169565, 0.339131, 0.752174, 1 ); 
                }; 
                
                vignetteBottomStrength = 0.05; 
                vignetteSizeFraction = 0.17; 
                vignetteTopStrength = 0.5; 
            }; 
            
            frame = CFrame::fromXYZYPRDegrees(11.1, 1.9, 4.7, 59.3, -10.3, 0 ); 
            motionBlurSettings = MotionBlurSettings { 
                cameraMotionInfluence = 0.5; 
                enabled = true; 
                exposureFraction = 0.75; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 27; 
            }; 
            
            projection = Projection { 
                farPlaneZ = -200; 
                fovDegrees = 40; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.1; 
                pixelOffset = Vector2(0, 0 ); 
            }; 
            
            visualizationScale = 1; 
        }; 

        dimBlueEmitterSphere = VisibleEntity { 
            frame = Point3(-4, -0.6, 0 ); 
            model = "dimBlueEmitterSphereModel"; 
            visible = true; 
        }; 
        
        dimCyanEmitterSphere = VisibleEntity { 
            frame = Point3(-4, -0.6, 1 ); 
            model = "dimCyanEmitterSphereModel"; 
            visible = true; 
        }; 
        
        dimGreenEmitterSphere = VisibleEntity { 
            frame = Point3(-4, -0.6, 2 ); 
            model = "dimGreenEmitterSphereModel"; 
            visible = true; 
        }; 
        
        dimPurpleEmitterSphere = VisibleEntity { 
            frame = Point3(-4, -0.6, -1 ); 
            model = "dimPurpleEmitterSphereModel"; 
            visible = true; 
        }; 
        
        dimRedEmitterSphere = 
        /* EmitterSpheres */
        VisibleEntity { 
            frame = Point3(-4, -0.6, 4 ); 
            model = "dimRedEmitterSphereModel"; 
            visible = true; 
        }; 
        
        dimYellowEmitterSphere = VisibleEntity { 
            frame = Point3(-4, -0.6, 3 ); 
            model = "dimYellowEmitterSphereModel"; 
            visible = true; 
        }; 
        /* 
        ground = VisibleEntity { 
            frame = CFrame::fromXYZYPRDegrees(0, -1, 0, 0 ); 
            model = "groundModel"; 
            visible = true; 
        }; 
     */   
        sun = 
        /* Each entity has a name and is an instance of a model.  The instantiation syntax accepts
        two (optional) arguments: a position spline (which can be a single position), and a
        pose spline (which can be a single pose). */
        Light { 
            attenuation = ( 0.0001, 0, 1 ); 
            bulbPower = Color3(70000 ); 
            castsShadows = true; 
            enabled = false; 
            frame = CFrame::fromXYZYPRDegrees(-15.1351, 36.5859, -14.5709, -135.458, -59.5992, 5.45791 ); 
            nearPlaneZLimit = -30; 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(2048, 2048 ); 
            spotHalfAngleDegrees = 20; 
            spotSquare = true; 
            type = "SPOT"; 
        }; 
        
    }; 
    /*
    lightingEnvironment = LightingEnvironment { 
        ambientOcclusionSettings = AmbientOcclusionSettings { 
            bias = 0.012; 
            blurRadius = 4; 
            blurStepSize = 2; 
            depthPeelSeparationHint = 0.872287; 
            edgeSharpness = 1; 
            enabled = true; 
            intensity = 1; 
            monotonicallyDecreasingBilateralWeights = false; 
            numSamples = 19; 
            radius = 1.5; 
            useDepthPeelBuffer = true; 
            useNormalBuffer = true; 
            useNormalsInBlur = true; 
        }; 
        
        emissiveRadianceScale = 1; 
        environmentMap = Texture::Specification { 
                encoding = "SRGB8"; 
                filename = "cubemap/uffizi/uffizi*.jpg"; 
                encoding = Texture::Encoding {
                    readMultiplyFirst = 0.8;
                }
        }; 
        
        lightMapRadianceScale = 1; 
        radianceScale = 1; 
    };*/ 
    
    models = { 
        
        brightBlueEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(0, 0, 3.5 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        brightCyanEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(0, 3.5, 3.5 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        brightGreenEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(0, 3.5, 0 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        brightPurpleEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(3.5, 0, 3.5 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        brightRedEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(3.5, 0, 0 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        brightYellowEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(3.5, 3.5, 0 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 

        dimBlueEmitterSphereModel = 
        /* blue */
        ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(0, 0, 3 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        dimCyanEmitterSphereModel = 
        /* cyan */
        ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(0, 3, 3 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        dimGreenEmitterSphereModel = 
        /* green */
        ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(0, 3, 0 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        dimPurpleEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(3, 0, 3 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        dimRedEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(3, 0, 0 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        
        dimYellowEmitterSphereModel = ArticulatedModel::Specification { 
            filename = "ifs/sphere.ifs"; 
            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        emissive = Color3(3, 3, 0 ); 
                        lambertian = Color3(0 ); 
                    } ) ); 
            
            scale = 0.4; 
        }; 
        groundModel = ArticulatedModel::Specification { 
            filename = "ifs/squarex8.ifs"; 
            preprocess = ( 
                setCFrame(root(), CFrame::fromXYZYPRDegrees(0, 0, 0, 0, -90, 0 ) ); 
                
                /* Refer to meshes by name, root(), or all(). */
                setTwoSided("mesh", true ); 
                setMaterial(all(), UniversalMaterial::Specification { 
                        bump = "material/stonewall/stonewall-B.png"; 
                        lambertian = "material/stonewall/stonewall-L.jpg"; 
                    } ) ); 
            
            scale = 20; 
        }; 
        
        
    }; 
    
    name = "Simple G3D Feature Test - Emissive"; 
} 
